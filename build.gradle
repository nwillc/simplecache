/*
 * Copyright 2019 nwillc@gmail.com
 *
 * Permission to use, copy, modify, and/or distribute this software for any purpose with or without
 * fee is hereby granted, provided that the above copyright notice and this permission notice appear
 * in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 * SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THIS SOFTWARE.
 */

plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'maven'
    id "com.github.nwillc.vplugin" version "2.3.0"
    id "com.jfrog.bintray" version "1.8.4"
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25',
            'javax.cache:cache-api:1.0.0'

    testCompile 'junit:junit:4.12',
            'com.github.nwillc:jdk_contract_tests:1.9.2',
            'org.assertj:assertj-core:3.11.1',
            'org.mockito:mockito-core:2.24.0'
}

group = 'com.github.nwillc'
version = '1.1.0'
targetCompatibility = JavaVersion.VERSION_1_8.toString()
sourceCompatibility = JavaVersion.VERSION_1_8.toString()

test {
    beforeTest { descriptor ->
        logger.lifecycle('\tRunning ' + descriptor.className + '.' + descriptor.name)
    }

    afterSuite { descriptor, result ->
        if (descriptor.parent == null) {
            logger.lifecycle('\tTests run: ' + result.testCount
                    + ', Failures: ' + result.failedTestCount
                    + ', Skipped: ' + result.skippedTestCount)
        }
    }

    testLogging {
        exceptionFormat 'full'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar 
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    dryRun = false
    publish = true
    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        name = project.name
        desc = 'JSR 107 simple implementation'
        websiteUrl = 'https://github.com/nwillc/simplecache'
        issueTrackerUrl = 'https://github.com/nwillc/simplecache/issues'
        vcsUrl = 'https://github.com/nwillc/simplecache.git'
        licenses = ['ISC']
        labels = ['simplecache', 'jsr-107']
        publicDownloadNumbers = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file('$buildDir/libs/' + project.name + '-' + project.version + '.pom')
    }
}
